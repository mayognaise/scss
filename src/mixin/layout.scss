/// Centre a block to make it a container. Default value of `$grid-width` is [here](#100%20-%20configuration-variable-grid-width).
/// @group 002 - layout
/// @param {Number} $max-width [$grid-width] - Max width for the container.
/// @param {Number} $margin-top [0] - Top margin.
/// @param {Number} $margin-bottom [0] - Bottom margin.
/// @output `max-width`, `margin` and `width`
/// @require $grid-width
/// @example
///   @include max-width-center;
///   //   margin: 0 auto 0;
///   //   max-width: 960px;
///   //   width: 100%;
/// @example
///   @include max-width-center(1200px);
///   //   margin: 0 auto 0;
///   //   max-width: 1200px;
///   //   width: 100%;
/// @example
///   @include max-width-center(null, 30px);
///   //   margin: 30px auto 0;
///   //   max-width: 960px;
///   //   width: 100%;
/// @example
///   @include max-width-center(null, null, 30px);
///   //   margin: 0 auto 30px;
///   //   max-width: 960px;
///   //   width: 100%;
@mixin max-width-center($max-width: null, $margin-top: 0, $margin-bottom: 0) {
  @if (not is-unitless($max-width)) {
    $max-width: $grid-width;
  }
  @if ($margin-top != 0 or not is-unitless($margin-top)) {
    $margin-top: 0;
  }
  @if ($margin-bottom != 0 or not is-unitless($margin-bottom)) {
    $margin-bottom: 0;
  }
  margin: $margin-top auto $margin-bottom;
  max-width: $grid-width;
  width: 100%;
}
