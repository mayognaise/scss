/// Mixin to manage responsive breakpoints
/// @group 200 - library
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
/// @link https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// Mixin to add media query for x-small breakpoint (such as **iPhone 5/SE**). Default is **map-get($breakpoints, 'x-small')**. To update the key, update [$breakpoints](#10%20-%20variables-variable-breakpoints)
/// @group 03 - Media
/// @require $breakpoints
/// @example
///   @include x-small {
///     color: red;
///   }
///   // @media (max-width: 359px) {
///   //   color: red;
///   // }
@mixin x-small {
  @include respond-to('x-small') {
    @content;
  }
}

/// Mixin to add media query for small breakpoint (mainly for **mobile devices**). Default is **map-get($breakpoints, 'small')**. To update the key, update [$breakpoints](#10%20-%20variables-variable-breakpoints)
/// @group 03 - Media
/// @require $breakpoints
/// @example
///   @include small {
///     color: red;
///   }
///   // @media (max-width: 767px) {
///   //   color: red;
///   // }
@mixin small {
  @include respond-to('small') {
    @content;
  }
}

/// Mixin to add media query for medium breakpoint (such as **tablet / desktop**). Default is **map-get($breakpoints, 'medium')**. To update the key, update [$breakpoints](#10%20-%20variables-variable-breakpoints)
/// @group 03 - Media
/// @require $breakpoints
/// @example
///   @include medium {
///     color: red;
///   }
///   // @media (min-width: 768px) {
///   //   color: red;
///   // }
@mixin medium {
  @include respond-to('medium') {
    @content;
  }
}

/// Mixin to add media query for large breakpoint (such as **MDPI**). Default is **map-get($breakpoints, 'large')**. To update the key, update [$breakpoints](#10%20-%20variables-variable-breakpoints)
/// @group 03 - Media
/// @require $breakpoints
/// @example
///   @include large {
///     color: red;
///   }
///   // @media (min-width: 1200px) {
///   //   color: red;
///   // }
@mixin large {
  @include respond-to('large') {
    @content;
  }
}

/// Mixin to add media query for x-large breakpoint (such as **HiDPI**). Default is **map-get($breakpoints, 'x-large')**. To update the key, update [$breakpoints](#10%20-%20variables-variable-breakpoints)
/// @group 03 - Media
/// @require $breakpoints
/// @example
///   @include x-large {
///     color: red;
///   }
///   // @media (min-width: 1440px) {
///   //   color: red;
///   // }
@mixin x-large {
  @include respond-to('x-large') {
    @content;
  }
}
